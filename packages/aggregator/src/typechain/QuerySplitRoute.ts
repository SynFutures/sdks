/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace LibTypes {
  export type ResultAmountStruct = {
    bestAmount: BigNumberish;
    midPrice: BigNumberish;
  };

  export type ResultAmountStructOutput = [BigNumber, BigNumber] & {
    bestAmount: BigNumber;
    midPrice: BigNumber;
  };

  export type PairStruct = {
    token0: string;
    token1: string;
    poolAddr: string;
    poolType: BigNumberish;
    fee: BigNumberish;
    swapType: BigNumberish;
  };

  export type PairStructOutput = [string, string, string, number, BigNumber, number] & {
    token0: string;
    token1: string;
    poolAddr: string;
    poolType: number;
    fee: BigNumber;
    swapType: number;
  };

  export type OneHopStruct = {
    pools: LibTypes.PairStruct[];
    weights: BigNumberish[];
  };

  export type OneHopStructOutput = [LibTypes.PairStructOutput[], BigNumber[]] & {
    pools: LibTypes.PairStructOutput[];
    weights: BigNumber[];
  };

  export type SplitPathInfoStruct = {
    tokens: string[];
    oneHops: LibTypes.OneHopStruct[];
    finalAmountOut: BigNumberish;
    isValid: boolean;
  };

  export type SplitPathInfoStructOutput = [string[], LibTypes.OneHopStructOutput[], BigNumber, boolean] & {
    tokens: string[];
    oneHops: LibTypes.OneHopStructOutput[];
    finalAmountOut: BigNumber;
    isValid: boolean;
  };
}

export interface QuerySplitRouteInterface extends utils.Interface {
  functions: {
    'config()': FunctionFragment;
    'querySplitRoute(address,address,uint256,bool,uint256,address)': FunctionFragment;
    'splits()': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'config' | 'querySplitRoute' | 'splits'): FunctionFragment;

  encodeFunctionData(functionFragment: 'config', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'querySplitRoute',
    values: [string, string, BigNumberish, boolean, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'splits', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'config', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'querySplitRoute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'splits', data: BytesLike): Result;

  events: {};
}

export interface QuerySplitRoute extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuerySplitRouteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    config(overrides?: CallOverrides): Promise<[string]>;

    querySplitRoute(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      isDirect: boolean,
      dexFlagAndSplits: BigNumberish,
      specifiedMiddleToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    splits(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  config(overrides?: CallOverrides): Promise<string>;

  querySplitRoute(
    fromToken: string,
    toToken: string,
    fromAmount: BigNumberish,
    isDirect: boolean,
    dexFlagAndSplits: BigNumberish,
    specifiedMiddleToken: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  splits(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    config(overrides?: CallOverrides): Promise<string>;

    querySplitRoute(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      isDirect: boolean,
      dexFlagAndSplits: BigNumberish,
      specifiedMiddleToken: string,
      overrides?: CallOverrides,
    ): Promise<
      [LibTypes.ResultAmountStructOutput, LibTypes.SplitPathInfoStructOutput] & {
        resAmount: LibTypes.ResultAmountStructOutput;
        bestPathInfo: LibTypes.SplitPathInfoStructOutput;
      }
    >;

    splits(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    config(overrides?: CallOverrides): Promise<BigNumber>;

    querySplitRoute(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      isDirect: boolean,
      dexFlagAndSplits: BigNumberish,
      specifiedMiddleToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    splits(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    querySplitRoute(
      fromToken: string,
      toToken: string,
      fromAmount: BigNumberish,
      isDirect: boolean,
      dexFlagAndSplits: BigNumberish,
      specifiedMiddleToken: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    splits(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
